{
    "title": "Aggregates, as a start to statefull Kafka operations",
    "paragraphs": [
        {
            "text":  "Aggregating needs some attention, as our first real Statefull Kafka operation (after count).<br><a href='https://kafka.apache.org/26/documentation/streams/developer-guide/dsl-api.html#streams-developer-guide-dsl-aggregating' target='_blank'>Look here for the documentation of the Aggregator</a>"
      
        },
        {
            "text": "Our sandbox data that we always use",
            "code": {
                "language": "java",
                "path": "./data/les08/ProduceData.java" 
            }
        },
            {
            "text": "An aggregator working on streams works on streams after the stream is grouped by an the operation groupBy or groupByKey.<br>The grouping result is <ol><li>The key, usually a simple object.<li>The value, this is a kind of stream of the grouped data.</li></ol>As an example in our case, with groupBy on province name, the key is the name of the province, and the value is a stream of persons living in that province.<br><br>The stream aggregator has 3 parameters:<ol><li>An aggregator has to be initialized. Usually a new object is used to store the results here.</li><li>Then the second parameter does the add algorithm on the initialized value</li><li>And then a parameter how to materialize the result</li></ol>. The result is a table on which we can build more logic.",
            "code": {
                "language": "java",
                "path": "./data/les08/Aggregate01Stream.java"
            }
        },
        {
            "text": "The table aggregator is similar to the stream aggregator, but has 4 parameters. The third parameter is an substractor.<br>If a key/value record comes in with a value of null, it is considered a deletion.",
            "code": {
                "language": "java",
                "path": "./data/les08/Aggregate02Table.java"
            }
        } ,
        {
            "text": "Reduce is a simpler variant, usefull if the type of the value stays the same.<br>Here a nice example.",
            "code": {
                "language": "java",
                "path": "./data/les08/Aggregate03Reduce.java"
            }
        }       
       
    ]
}